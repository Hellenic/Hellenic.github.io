(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
})();

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}

var _coreLoaderUtils = require('./core/LoaderUtils');

var _coreLoaderUtils2 = _interopRequireDefault(_coreLoaderUtils);

var _coreProgress = require('./core/Progress');

var _coreProgress2 = _interopRequireDefault(_coreProgress);

/**
* DemoLoader is a loader for DemoScene system. Loader will load the actual DemoScene system
* but also every other script it's given. Once the loading is completed, it will initialize
* the DemoScene system.
*
* TODO In the future DemoLoader will be refactored away from jQuery to use ES6 dynamic module loading
* However, since that standard is not finished I feel like there's no point to do this yet.
* I could use System.js to load modules and something else, but at least shaders are not supported yet,
* so I would need jQuery for that still anyways.
*/

var DemoLoader = (function () {
    function DemoLoader() {
        _classCallCheck(this, DemoLoader);

        this.initialScripts = [];
        this.scripts = [];
        this.initialsLoaded = false;

        this.progress = new _coreProgress2['default']();

        /*
        this.rootPath = rootPath;
         // Set our baseURL reference path
        System.config({
            baseURL: rootPath
        });
         System.import('lib/Detector').then(Detector) {
            console.log("Detector loaded", Detector);
        });
        */
    }

    _createClass(DemoLoader, [{
        key: 'addScripts',
        value: function addScripts(scripts, initial, callback) {
            for (var i = 0; i < scripts.length; i++) {
                var script = scripts[i];
                this.addScript(script, initial, callback);
            }
        }
    }, {
        key: 'addScript',
        value: function addScript(scriptData, initial, callback) {
            var scriptObj = this.getScriptObject(scriptData, callback);
            if (initial) {
                this.initialScripts.push(scriptObj);
            } else {
                this.scripts.push(scriptObj);
            }
        }
    }, {
        key: 'doLoad',
        value: function doLoad() {
            // Get next script to load
            var scriptObject = this.getNextScript();

            // If nothing to load, broadcast and quit
            if (!scriptObject) {
                // Broadcast event that everything was loaded
                $(document).trigger("loaderDone.DemoSystem");
                return;
            }

            $(document).trigger("loaderTick.DemoSystem", { name: scriptObject.name, file: scriptObject.file });

            var $loader = _coreLoaderUtils2['default'].getLoader(scriptObject.file);
            var thisRef = this;

            // Load the script
            $loader(scriptObject.file).done(function (script, textStatus) {
                // After loading, execute callback
                if (typeof scriptObject.callback === "function") {
                    // That script callback, will get secondary callback, which should
                    // continue this loading when ready.
                    return scriptObject.callback(scriptObject.name, scriptObject.file, script, function () {
                        thisRef.doLoad();
                    });
                }

                // When done with this file, load more
                thisRef.doLoad();
            }).fail(function (jqxhr, settings, exception) {
                console.error("Loading failed! File: " + scriptObject.file + " // Status: " + jqxhr.status, exception);
            });
        }
    }, {
        key: 'getNextScript',
        value: function getNextScript() {
            // Get the prioritized non-empty array
            var scriptArray = this.getScriptArray();
            if (scriptArray == null) return null;

            // Return the next script object fromt he list
            return scriptArray.shift();
        }
    }, {
        key: 'getScriptArray',
        value: function getScriptArray() {
            if (this.initialScripts.length > 0) return this.initialScripts;

            if (!this.initialsLoaded) {
                this.initialsLoaded = true;
                $(document).trigger("loaderReady.DemoSystem");
            }

            if (this.scripts.length > 0) return this.scripts;

            return null;
        }
    }, {
        key: 'getScriptObject',
        value: function getScriptObject(scriptData, callback) {
            var name = "";
            var file = "";

            if (typeof scriptData === "object") {
                name = scriptData.name;
                file = scriptData.file;
            } else {
                name = _coreLoaderUtils2['default'].getFilename(scriptData);
                file = scriptData;
            }

            return { name: name, file: file, callback: callback };
        }
    }, {
        key: 'start',
        value: function start() {
            // Count scripts
            var scriptCount = this.initialScripts.length + this.scripts.length + 1;

            // Broadcast event that loading is about to start
            $(document).trigger("loaderStart.DemoSystem", { fileCount: scriptCount });

            // Start loading from the initial scripts
            this.doLoad();
        }
    }]);

    return DemoLoader;
})();

exports['default'] = DemoLoader;
module.exports = exports['default'];

},{"./core/LoaderUtils":3,"./core/Progress":4}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
})();

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}

var _DemoLoader = require('./DemoLoader');

var _DemoLoader2 = _interopRequireDefault(_DemoLoader);

//import Configuration from './core/Configuration';

/**
* DemoScene system with Three.js
* DemoScene handles the initialization for scenes, possible errors,
* the actual demo loop, etc.
*
* TODO Finish ES6 transform
*/

var DemoScene = (function () {
    function DemoScene(config, path) {
        _classCallCheck(this, DemoScene);

        // Root path of the DemoSystem
        this.setupRootPath(path);

        this.loader = new _DemoLoader2['default']();

        this.started = false;
        this.settings = config;
        this.applySettings();

        // TODO Refactor
        // Give all the internal engine scripts to the loader
        this.loader.addScript(this.ROOT_PATH + "lib/Detector.js", true);
        this.loader.addScript(this.ROOT_PATH + "models/Scene.js", true);
        this.loader.addScript(this.ROOT_PATH + "models/Model.js", true);
        this.loader.addScript(this.ROOT_PATH + "models/Action.js", true);
        this.loader.addScript(this.ROOT_PATH + "models/AreaTrigger.js", true);
        this.loader.addScript(this.ROOT_PATH + "services/DemoService.js", true);
        this.loader.addScript(this.ROOT_PATH + "services/ActionService.js", true);
        this.loader.addScript(this.ROOT_PATH + "services/ModelService.js", true);
        this.loader.addScript(this.ROOT_PATH + "services/PhysicsService.js", true);
        this.loader.addScript(this.ROOT_PATH + "services/TriggerService.js", true);
        this.loader.addScript(this.ROOT_PATH + "managers/ActionManager.js", true);
        this.loader.addScript(this.ROOT_PATH + "controllers/DemoController.js", true);
        this.loader.addScript(this.ROOT_PATH + "controllers/InteractionController.js", true);
        this.loader.addScript(this.ROOT_PATH + "controllers/TriggerController.js", true);
        this.loader.addScript(this.ROOT_PATH + "controllers/DialogController.js", true);
        this.loader.addScript(this.ROOT_PATH + "controllers/EventController.js", true);
        this.loader.addScript(this.ROOT_PATH + "utils/DemoUtils.js", true);
        this.loader.addScript(this.ROOT_PATH + "utils/Statics.js", true);
        this.loader.addScript(this.ROOT_PATH + "utils/Support.js", true);
    }

    /**
        Private methods
    */

    _createClass(DemoScene, [{
        key: 'setupRootPath',
        value: function setupRootPath(path) {
            this.ROOT_PATH = path;
            if (!path && document.currentScript) {
                var currentPath = document.currentScript.src;
                if (currentPath) {
                    this.ROOT_PATH = currentPath.substring(0, currentPath.lastIndexOf("/") + 1);
                } else {
                    this.ROOT_PATH = '/';
                }
            }
        }
    }, {
        key: 'shaderCallback',
        value: function shaderCallback(name, file, content, callback) {
            Shaders[name] = content;
            callback();
        }
    }, {
        key: 'modelCallback',
        value: function modelCallback(name, file, content, callback) {
            var modelClass = eval(name);
            if (modelClass instanceof Model) {
                ModelService.load(modelClass, callback);
            }
        }
    }, {
        key: 'setProperties',

        /**
            Public methods
        */
        value: function setProperties(config) {
            if (this.started) {
                console.warn("You cannot set properties anymore after the DemoScene engine has been started.");
                return;
            }

            // Merge existing settings and given config
            this.settings = Object.assign(config, this.settings);
            this.applySettings();
        }
    }, {
        key: 'applySettings',
        value: function applySettings() {
            if (this.settings.controls) {
                this.loader.addScript(this.ROOT_PATH + "modules/CharacterControls.js", true);
            }
            if (this.settings.pointerlock) {
                this.loader.addScript(this.ROOT_PATH + "modules/Pointerlock.js", true);
            }
            if (this.settings.audio) {
                this.loader.addScript(this.ROOT_PATH + "soundsystem/AudioPlayer.js", true);
                this.loader.addScript(this.ROOT_PATH + "soundsystem/MusicPlayer.js", true);
                this.loader.addScript(this.ROOT_PATH + "soundsystem/SoundPlayer.js", true);
            }
        }
    }, {
        key: 'addGenericScript',
        value: function addGenericScript(name, scriptFile, initial, callback) {
            this.loader.addScript({ name: name, file: scriptFile }, initial, callback);
        }
    }, {
        key: 'addScene',
        value: function addScene(sceneConfig) {
            var initial = sceneConfig.initial;
            this.loader.addScripts(sceneConfig.shaders, initial, this.shaderCallback);
            this.loader.addScripts(sceneConfig.models, initial, this.modelCallback);
            this.loader.addScript(sceneConfig.scene, initial);
        }
    }, {
        key: 'start',
        value: function start() {
            this.started = true;
            this.loader.start();

            return true;
        }
    }]);

    return DemoScene;
})();

exports['default'] = DemoScene;
module.exports = exports['default'];

},{"./DemoLoader":1}],3:[function(require,module,exports){
'use strict';

/**
* TODO Finish ES6 transform, DemoUtils
*/
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
})();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var LoaderUtils = (function () {
    function LoaderUtils() {
        _classCallCheck(this, LoaderUtils);
    }

    /**
    * Checks if given string parameter is empty or null.
    *
    * @param {string} string - String to be checked if it's an empty string
    * @public
    */

    _createClass(LoaderUtils, null, [{
        key: "isEmptyString",
        value: function isEmptyString(param) {
            if (typeof param !== "string" || param == null || param.length <= 0) return true;

            return false;
        }
    }, {
        key: "getFilename",
        value: function getFilename(file) {
            var filename = file;
            if (filename.indexOf("/") >= 0) {
                filename = filename.substring(filename.lastIndexOf("/") + 1);
            }

            if (filename.indexOf(".") < 0) return filename;

            return filename.substring(0, filename.lastIndexOf("."));
        }
    }, {
        key: "getUrlParam",
        value: function getUrlParam(name) {
            var results = new RegExp('[\?&amp;]' + name + '=([^&amp;#]*)').exec(window.location.href);
            if (results == null) return null;

            return results[1];
        }

        /**
        * Get jQuery loader based on the file extension.
        */
    }, {
        key: "getLoader",
        value: function getLoader(file) {
            // Use $.get for shaders
            if (file.indexOf(".glsl") > 0) {
                return $.get;
            }

            // Otherwise just loading scripts
            return $.getScript;
        }
    }]);

    return LoaderUtils;
})();

exports["default"] = LoaderUtils;
module.exports = exports["default"];

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
})();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Progress = (function () {
    function Progress() {
        _classCallCheck(this, Progress);

        this.element = $("#progress");
        this.barElement = $("#progressbar");

        if (this.element.length == 0) {
            console.warn("Progress module not initialized since #progress element is not defined.");
            return;
        }

        this.currentState = null;
        this.currentProgress = 0;

        this.fileCount = 0;
        this.currentCount = 0;

        var thisRef = this;
        // Bind jQuery events to monitor progress changes
        $(document).on("loaderStart.DemoSystem", function (event, data) {
            thisRef.start(event, data);
        });
        $(document).on("loaderTick.DemoSystem", function (event, data) {
            thisRef.incrementProgress(event, data);
        });
        $(document).on("loaderDone.DemoSystem", function (event) {
            thisRef.done(event);
        });

        // Change state to initial "preparing to download"
        this.changeState("before");
        this.setBar(null, 0);
    }

    _createClass(Progress, [{
        key: "start",
        value: function start(event, data) {
            this.fileCount = data.fileCount;

            this.changeState("loading");
            this.setBar(null, 0);
        }
    }, {
        key: "done",
        value: function done(event) {
            this.changeState("done");
            this.setBar(null, 100);
        }
    }, {
        key: "incrementProgress",
        value: function incrementProgress(event, data) {
            if (this.currentState == null) return;

            this.currentCount = this.currentCount + 1;
            var newProgress = Math.floor(this.currentCount / this.fileCount * 100);

            this.setBar(data.file, newProgress);
        }
    }, {
        key: "setBar",
        value: function setBar(file, progress) {
            var fileElem = this.barElement.find(".progress-file");
            var progressElem = this.barElement.find(".progress-percent");
            var barElem = this.barElement.find(".progress-width");

            if (file) fileElem.text(file).show();else fileElem.text("").hide();

            if (!isNaN(progress)) {
                this.currentProgress = progress;
                progressElem.text(progress);

                barElem.css("width", progress + "%");
            }
        }
    }, {
        key: "changeState",
        value: function changeState(nextState) {
            this.currentState = nextState;

            // Hide everything but the progressbar within the element
            this.element.children().hide();
            this.barElement.show();

            // Get the element for current state and show it
            var stateElem = this.element.children("[data-state='" + this.currentState + "']");
            var hideElemSelect = stateElem.data("hide");
            var showElemSelect = stateElem.data("show");

            stateElem.show();

            if (hideElemSelect != "") {
                $(hideElemSelect).hide();
            }

            if (showElemSelect != "") {
                $(showElemSelect).show();
            }
        }
    }]);

    return Progress;
})();

exports["default"] = Progress;
module.exports = exports["default"];

},{}]},{},[2]);
